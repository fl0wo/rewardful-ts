import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

import { Pagination } from "./common";
import { id } from "./common";

type ListAffiliateLinksResponse = Partial<{
  pagination: Pagination &
    Partial<{
      previous_page: number | null;
      current_page: number;
      next_page: number | null;
      count: number;
      limit: number;
      total_pages: number;
      total_count: number;
    }>;
  data: Array<AffiliateLink>;
}>;
type AffiliateLink = {
  id: string;
  url: string;
  token: string;
  visitors: number;
  leads: number;
  conversions: number;
  affiliate_id: string;
};

const AffiliateLink: z.ZodType<AffiliateLink> = z.object({
  id: z
    .string()
    .uuid()
    .describe("The unique identifier for the affiliate link."),
  url: z.string().url().describe("The URL associated with the affiliate link."),
  token: z
    .string()
    .describe(
      "The unique token for the affiliate link, usually a short identifier."
    ),
  visitors: z
    .number()
    .int()
    .describe("The number of visitors who have used this affiliate link."),
  leads: z
    .number()
    .int()
    .describe("The number of leads generated by this affiliate link."),
  conversions: z
    .number()
    .int()
    .describe("The number of conversions generated by this affiliate link."),
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this link."),
});
const ListAffiliateLinksResponse: z.ZodType<ListAffiliateLinksResponse> = z
  .object({
    pagination: Pagination.and(
      z
        .object({
          previous_page: z.number().nullable(),
          current_page: z.number(),
          next_page: z.number().nullable(),
          count: z.number(),
          limit: z.number(),
          total_pages: z.number(),
          total_count: z.number(),
        })
        .partial()
    ),
    data: z.array(AffiliateLink).describe("List of affiliate links"),
  })
  .partial();
const CreateAffiliateLinkRequest = z.object({
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this link."),
  token: z
    .string()
    .describe(
      "The unique token for the affiliate link, usually a short identifier."
    ),
});
const UpdateAffiliateLinkRequest = z
  .object({
    token: z.string().describe("The new unique token for the affiliate link."),
  })
  .partial();

export const schemas = {
  AffiliateLink,
  ListAffiliateLinksResponse,
  CreateAffiliateLinkRequest,
  UpdateAffiliateLinkRequest,
};

export const endpoints = makeApi([
  {
    method: "get",
    path: "/affiliate_links",
    alias: "getAffiliate_links",
    description: `Retrieve a list of all affiliate links with pagination`,
    requestFormat: "json",
    response: ListAffiliateLinksResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/affiliate_links",
    alias: "postAffiliate_links",
    description: `Create a new affiliate link`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: CreateAffiliateLinkRequest,
      },
    ],
    response: AffiliateLink,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliate_links/:id",
    alias: "getAffiliate_linksId",
    description: `Retrieve a single affiliate link by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: id,
      },
    ],
    response: AffiliateLink,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate link not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/affiliate_links/:id",
    alias: "putAffiliate_linksId",
    description: `Update an existing affiliate link by its unique ID`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: UpdateAffiliateLinkRequest,
      },
      {
        name: "id",
        type: "Path",
        schema: id,
      },
    ],
    response: AffiliateLink,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate link not found`,
        schema: z.void(),
      },
    ],
  },
]);

export const AffiliateLinkApi = new Zodios(
  "https://api.getrewardful.com/v1",
  endpoints
);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options);
}
