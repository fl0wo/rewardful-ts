import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

import { Pagination } from "./common";
import { id } from "./common";

type ListAffiliateCouponsResponse = Partial<{
  pagination: Pagination &
    Partial<{
      previous_page: number | null;
      current_page: number;
      next_page: number | null;
      count: number;
      limit: number;
      total_pages: number;
      total_count: number;
    }>;
  data: Array<AffiliateCoupon>;
}>;
type AffiliateCoupon = {
  id: string;
  external_id: string;
  token: string;
  leads: number;
  conversions: number;
  affiliate_id: string;
};

const AffiliateCoupon: z.ZodType<AffiliateCoupon> = z.object({
  id: z
    .string()
    .uuid()
    .describe("The unique identifier for the affiliate coupon."),
  external_id: z
    .string()
    .describe(
      "The external ID associated with the affiliate coupon, often used as a reference ID."
    ),
  token: z
    .string()
    .describe("The unique token or code for the affiliate coupon."),
  leads: z
    .number()
    .int()
    .describe("The number of leads generated by this coupon."),
  conversions: z
    .number()
    .int()
    .describe("The number of conversions generated by this coupon."),
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this coupon."),
});
const ListAffiliateCouponsResponse: z.ZodType<ListAffiliateCouponsResponse> = z
  .object({
    pagination: Pagination.and(
      z
        .object({
          previous_page: z.number().nullable(),
          current_page: z.number(),
          next_page: z.number().nullable(),
          count: z.number(),
          limit: z.number(),
          total_pages: z.number(),
          total_count: z.number(),
        })
        .partial()
    ),
    data: z.array(AffiliateCoupon).describe("List of affiliate coupons"),
  })
  .partial();
const CreateAffiliateCouponRequest = z.object({
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this coupon."),
  token: z
    .string()
    .describe("The unique token or code for the affiliate coupon."),
});

export const schemas = {
  AffiliateCoupon,
  ListAffiliateCouponsResponse,
  CreateAffiliateCouponRequest,
};

export const endpoints = makeApi([
  {
    method: "get",
    path: "/affiliate_coupons",
    alias: "getAffiliate_coupons",
    description: `Retrieve a list of all affiliate coupons with pagination`,
    requestFormat: "json",
    response: ListAffiliateCouponsResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/affiliate_coupons",
    alias: "postAffiliate_coupons",
    description: `Create a new affiliate coupon`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: CreateAffiliateCouponRequest,
      },
    ],
    response: AffiliateCoupon,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliate_coupons/:id",
    alias: "getAffiliate_couponsId",
    description: `Retrieve a single affiliate coupon by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: id,
      },
    ],
    response: AffiliateCoupon,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate coupon not found`,
        schema: z.void(),
      },
    ],
  },
]);

export const AffiliateCouponApi = new Zodios(
  "https://api.getrewardful.com/v1",
  endpoints
);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options);
}
