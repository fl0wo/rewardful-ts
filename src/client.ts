import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

const Pagination = z.object({
  previous_page: z.number().nullable(),
  current_page: z.number(),
  next_page: z.number().nullable(),
  count: z.number(),
  limit: z.number(),
  total_pages: z.number(),
  total_count: z.number(),
});
const Affiliate = z.object({
  id: z.string().uuid(),
  created_at: z.string().datetime({ offset: true }),
  updated_at: z.string().datetime({ offset: true }),
  state: z.enum(["active", "inactive"]),
  first_name: z.string(),
  last_name: z.string(),
  email: z.string().email(),
  confirmed_at: z.string().datetime({ offset: true }).nullable(),
  paypal_email: z.string().email().nullable(),
  paypal_email_confirmed_at: z.string().datetime({ offset: true }).nullable(),
  wise_email: z.string().email().nullable(),
  wise_email_confirmed_at: z.string().datetime({ offset: true }).nullable(),
  receive_new_commission_notifications: z.boolean(),
  sign_in_count: z.number(),
  unconfirmed_email: z.string().email().nullable(),
  stripe_customer_id: z.string().nullable(),
  stripe_account_id: z.string().nullable(),
  visitors: z.number(),
  leads: z.number(),
  conversions: z.number(),
  campaign: z
    .object({
      id: z.string().uuid(),
      created_at: z.string().datetime({ offset: true }),
      updated_at: z.string().datetime({ offset: true }),
      name: z.string(),
    })
    .optional(),
});
const ListAllAffiliatesResponse = z.object({
  pagination: Pagination,
  data: z.array(Affiliate).describe("List of affiliates"),
});
const CreateAffiliateRequest = z.object({
  first_name: z.string().describe("First name of the affiliate"),
  last_name: z.string().describe("Last name of the affiliate"),
  email: z.string().email().describe("Email address of the affiliate"),
  token: z
    .string()
    .describe("Unique identifier or token for the affiliate")
    .optional(),
  stripe_customer_id: z
    .string()
    .describe("Stripe customer ID associated with the affiliate")
    .optional(),
});
const UpdateAffiliateRequest = z
  .object({
    first_name: z.string().describe("First name of the affiliate"),
    last_name: z.string().describe("Last name of the affiliate"),
    email: z.string().email().describe("Email address of the affiliate"),
    token: z.string().describe("Unique identifier or token for the affiliate"),
    stripe_customer_id: z
      .string()
      .describe("Stripe customer ID associated with the affiliate"),
  })
  .partial();
const SSO = z.object({
  url: z
    .string()
    .url()
    .describe("URL for the SSO login link for the affiliate"),
  expires: z
    .string()
    .datetime({ offset: true })
    .describe("Expiration timestamp of the SSO link"),
});
const AffiliateBasic = z.object({
  id: z.string().uuid().describe("Affiliate ID"),
  email: z.string().email().describe("Email address of the affiliate"),
});
const MagicLinkResponse = z.object({ sso: SSO, affiliate: AffiliateBasic });
const AffiliateLink = z.object({
  id: z
    .string()
    .uuid()
    .describe("The unique identifier for the affiliate link."),
  url: z.string().url().describe("The URL associated with the affiliate link."),
  token: z
    .string()
    .describe(
      "The unique token for the affiliate link, usually a short identifier."
    ),
  visitors: z
    .number()
    .int()
    .describe("The number of visitors who have used this affiliate link."),
  leads: z
    .number()
    .int()
    .describe("The number of leads generated by this affiliate link."),
  conversions: z
    .number()
    .int()
    .describe("The number of conversions generated by this affiliate link."),
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this link."),
});
const ListAffiliateLinksResponse = z.object({
  pagination: Pagination.and(
    z
      .object({
        previous_page: z.number().nullable(),
        current_page: z.number(),
        next_page: z.number().nullable(),
        count: z.number(),
        limit: z.number(),
        total_pages: z.number(),
        total_count: z.number(),
      })
      .partial()
  ),
  data: z.array(AffiliateLink).describe("List of affiliate links"),
});
const CreateAffiliateLinkRequest = z.object({
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this link."),
  token: z
    .string()
    .describe(
      "The unique token for the affiliate link, usually a short identifier."
    ),
});
const UpdateAffiliateLinkRequest = z
  .object({
    token: z.string().describe("The new unique token for the affiliate link."),
  })
  .partial();
const AffiliateCoupon = z.object({
  id: z
    .string()
    .uuid()
    .describe("The unique identifier for the affiliate coupon."),
  external_id: z
    .string()
    .describe(
      "The external ID associated with the affiliate coupon, often used as a reference ID."
    ),
  token: z
    .string()
    .describe("The unique token or code for the affiliate coupon."),
  leads: z
    .number()
    .int()
    .describe("The number of leads generated by this coupon."),
  conversions: z
    .number()
    .int()
    .describe("The number of conversions generated by this coupon."),
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this coupon."),
});
const ListAffiliateCouponsResponse = z.object({
  pagination: Pagination.and(
    z
      .object({
        previous_page: z.number().nullable(),
        current_page: z.number(),
        next_page: z.number().nullable(),
        count: z.number(),
        limit: z.number(),
        total_pages: z.number(),
        total_count: z.number(),
      })
      .partial()
  ),
  data: z.array(AffiliateCoupon).describe("List of affiliate coupons"),
});
const CreateAffiliateCouponRequest = z.object({
  affiliate_id: z
    .string()
    .uuid()
    .describe("The ID of the affiliate associated with this coupon."),
  token: z
    .string()
    .describe("The unique token or code for the affiliate coupon."),
});
const Link = z.object({
  id: z.string().uuid(),
  url: z.string().url(),
  token: z.string(),
  visitors: z.number().int(),
  leads: z.number().int(),
  conversions: z.number().int(),
});
const Customer = z.object({
  id: z
    .string()
    .describe("The unique identifier for the customer on the platform."),
  name: z.string().describe("The customer's full name."),
  email: z.string().email().describe("The customer's email address."),
  platform: z
    .string()
    .describe("The platform associated with this customer (e.g., Stripe)."),
});
const Referral = z.object({
  id: z.string().uuid().describe("The unique identifier for the referral."),
  link: Link,
  visits: z
    .number()
    .int()
    .describe("The number of visits generated by the referral."),
  customer: Customer,
  affiliate: Affiliate,
  created_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the referral was created."),
  became_lead_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the referral became a lead.")
    .nullable(),
  became_conversion_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the referral became a conversion.")
    .nullable(),
  expires_at: z
    .string()
    .datetime({ offset: true })
    .describe("Expiration timestamp of the referral.")
    .nullable(),
  updated_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the referral was last updated."),
  deactivated_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the referral was deactivated, if applicable.")
    .nullable(),
  conversion_state: z
    .enum(["conversion", "lead", "visitor"])
    .describe(
      "The current state of the referral, indicating if it is a conversion, lead, or visitor."
    ),
  stripe_account_id: z
    .string()
    .describe("The Stripe account ID associated with the referral.")
    .nullable(),
  stripe_customer_id: z
    .string()
    .describe("The Stripe customer ID associated with the referral.")
    .nullable(),
});
const ListReferralsResponse = z.object({
  pagination: Pagination.and(
    z
      .object({
        previous_page: z.number().nullable(),
        current_page: z.number(),
        next_page: z.number().nullable(),
        count: z.number(),
        limit: z.number(),
        total_pages: z.number(),
        total_count: z.number(),
      })
      .partial()
  ),
  data: z.array(Referral).describe("List of referrals"),
});
const Campaign = z
  .object({
    id: z.string().uuid().describe("The unique identifier of the campaign."),
    created_at: z
      .string()
      .datetime({ offset: true })
      .describe("Creation timestamp"),
    updated_at: z
      .string()
      .datetime({ offset: true })
      .describe("Last update timestamp"),
    name: z.string().describe("Campaign name"),
    url: z.string().url().describe("Campaign URL"),
    private: z.boolean().describe("Private campaign flag"),
    private_tokens: z.boolean().describe("Private tokens flag").nullable(),
    commission_amount_cents: z
      .number()
      .describe("Fixed commission amount in cents")
      .nullable(),
    commission_amount_currency: z
      .string()
      .describe("Commission amount currency")
      .nullable(),
    minimum_payout_cents: z
      .number()
      .describe("Minimum payout in cents")
      .nullable(),
    max_commission_period_months: z
      .number()
      .describe("Maximum commission period in months")
      .nullable(),
    max_commissions: z
      .number()
      .describe("Maximum number of commissions")
      .nullable(),
    days_before_referrals_expire: z
      .number()
      .describe("Days until referral expiration")
      .nullable(),
    days_until_commissions_are_due: z
      .number()
      .describe("Days until commission due date")
      .nullable(),
    affiliate_dashboard_text: z
      .string()
      .describe("Dashboard text for affiliates")
      .nullable(),
    custom_reward_description: z
      .string()
      .describe("Custom reward description")
      .nullable(),
    welcome_text: z.string().describe("Welcome message").nullable(),
    customers_visible_to_affiliates: z
      .boolean()
      .describe("Customer visibility flag")
      .nullable(),
    sale_description_visible_to_affiliates: z
      .boolean()
      .describe("Sale description visibility flag")
      .nullable(),
    parameter_type: z
      .enum(["query", "hash", "path"])
      .describe("Parameter type")
      .nullable(),
    stripe_coupon_id: z.string().describe("Stripe coupon ID").nullable(),
    default: z.boolean().describe("Default campaign flag").nullable(),
    reward_type: z.enum(["percent", "amount"]).describe("Reward type"),
    commission_percent: z.number().describe("Commission percentage").nullable(),
    minimum_payout_currency: z
      .string()
      .describe("Minimum payout currency")
      .nullable(),
    visitors: z.number().describe("Visitor count").nullable(),
    leads: z.number().describe("Lead count").nullable(),
    conversions: z.number().describe("Conversion count").nullable(),
    affiliates: z.number().describe("Affiliate count").nullable(),
  })
  .partial();
const Sale = z.object({
  id: z.string().uuid().describe("The unique identifier for the sale."),
  currency: z.string().describe("The currency used for the sale."),
  charged_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the sale was charged."),
  stripe_account_id: z
    .string()
    .describe("The Stripe account ID associated with the sale.")
    .nullable(),
  stripe_charge_id: z
    .string()
    .describe("The Stripe charge ID associated with the sale.")
    .nullable(),
  invoiced_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the sale was invoiced.")
    .nullable(),
  created_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the sale was created."),
  updated_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the sale was last updated."),
  charge_amount_cents: z
    .number()
    .int()
    .describe("The charged amount in cents."),
  refund_amount_cents: z
    .number()
    .int()
    .describe("The refunded amount in cents."),
  tax_amount_cents: z.number().int().describe("The tax amount in cents."),
  sale_amount_cents: z.number().int().describe("The sale amount in cents."),
  referral: Referral,
  affiliate: Affiliate,
});
const Commission = z.object({
  id: z.string().uuid().describe("The unique identifier for the commission."),
  created_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission was created."),
  updated_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission was last updated."),
  amount: z.number().int().describe("The amount of the commission in cents."),
  currency: z.string().describe("The currency of the commission amount."),
  due_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission is due.")
    .nullable(),
  paid_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission was paid.")
    .nullable(),
  campaign: Campaign,
  sale: Sale,
});
const ListCommissionsResponse = z.object({
  pagination: Pagination.and(
    z
      .object({
        previous_page: z.number().nullable(),
        current_page: z.number(),
        next_page: z.number().nullable(),
        count: z.number(),
        limit: z.number(),
        total_pages: z.number(),
        total_count: z.number(),
      })
      .partial()
  ),
  data: z.array(Commission).describe("List of commissions"),
});
const UpdateCommissionRequest = z
  .object({
    paid_at: z
      .string()
      .datetime({ offset: true })
      .describe(
        "Timestamp to mark the commission as paid. Use null to mark as unpaid."
      )
      .nullable(),
    due_at: z
      .string()
      .datetime({ offset: true })
      .describe("Timestamp to set the commission's due date.")
      .nullable(),
  })
  .partial();
const DeleteCommissionResponse = z.object({
  object: z.literal("commission").describe("Indicates the object type."),
  id: z
    .string()
    .uuid()
    .describe("The unique identifier of the deleted commission."),
  deleted: z
    .boolean()
    .describe("Indicates if the commission was successfully deleted."),
});
const CommissionItem = z.object({
  id: z.string().uuid().describe("The unique identifier of the commission."),
  currency: z.string().describe("The currency of the commission amount."),
  stripe_account_id: z
    .string()
    .describe("The Stripe account ID associated with the commission.")
    .nullable(),
  due_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission is due.")
    .nullable(),
  paid_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission was paid.")
    .nullable(),
  created_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission was created."),
  updated_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the commission was last updated."),
  amount: z.number().int().describe("The amount of the commission in cents."),
});
const Payout = z.object({
  id: z.string().uuid().describe("The unique identifier of the payout."),
  currency: z.string().describe("The currency of the payout."),
  paid_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the payout was marked as paid.")
    .nullable(),
  state: z
    .enum(["paid", "processing", "completed", "failed"])
    .describe("The current state of the payout."),
  paid_by_id: z
    .string()
    .uuid()
    .describe(
      "The ID of the user who marked the payout as paid, if applicable."
    )
    .nullable(),
  created_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the payout was created."),
  updated_at: z
    .string()
    .datetime({ offset: true })
    .describe("Timestamp when the payout was last updated."),
  amount: z.number().int().describe("The amount of the payout in cents."),
  affiliate: Affiliate,
  commissions: z
    .array(CommissionItem)
    .describe("List of commissions included in the payout."),
});
const ListPayoutsResponse = z.object({
  pagination: Pagination.and(
    z
      .object({
        previous_page: z.number().nullable(),
        current_page: z.number(),
        next_page: z.number().nullable(),
        count: z.number(),
        limit: z.number(),
        total_pages: z.number(),
        total_count: z.number(),
      })
      .partial()
  ),
  data: z.array(Payout).describe("List of payouts"),
});
const ErrorResponse = z.object({
  error: z.string().describe("Description of the error."),
});
const ListCampaignsResponse = z.object({
  pagination: Pagination.and(
    z
      .object({
        previous_page: z.number().nullable(),
        current_page: z.number(),
        next_page: z.number().nullable(),
        count: z.number(),
        limit: z.number(),
        total_pages: z.number(),
        total_count: z.number(),
      })
      .partial()
  ),
  data: z.array(Campaign).describe("List of campaigns"),
});
const CreateCampaignRequest = z.object({
  name: z.string().describe("The campaign's name"),
  url: z.string().url().describe("Base URL for generating affiliate links"),
  private: z
    .boolean()
    .describe("If true, campaign is invite-only. Default: false")
    .nullish(),
  reward_type: z
    .enum(["percent", "amount"])
    .describe("Type of reward - percent or amount"),
  commission_percent: z
    .number()
    .describe("Commission percentage (required if reward_type is percent)")
    .optional(),
  commission_amount_cents: z
    .number()
    .describe(
      "Fixed commission amount in cents (required if reward_type is amount)"
    )
    .optional(),
  commission_amount_currency: z
    .string()
    .describe(
      "Currency code for fixed commission (required if reward_type is amount)"
    )
    .optional(),
  minimum_payout_cents: z
    .number()
    .describe("Minimum cumulative commissions for payout. Default: 0")
    .nullish(),
  stripe_coupon_id: z
    .string()
    .describe(
      "Stripe coupon ID for double-sided incentives (Growth/Enterprise only)"
    )
    .nullish(),
});
const UpdateCampaignRequest = z.object({
  name: z.string().describe("The campaign's name").optional(),
  url: z
    .string()
    .url()
    .describe("Base URL for generating affiliate links")
    .optional(),
  private: z.boolean().describe("If true, campaign is invite-only").nullish(),
  reward_type: z
    .enum(["percent", "amount"])
    .describe("Type of reward - percent or amount"),
  commission_percent: z
    .number()
    .describe("Commission percentage (required if reward_type is percent)"),
  commission_amount_cents: z
    .number()
    .describe(
      "Fixed commission amount in cents (required if reward_type is amount)"
    ),
  commission_amount_currency: z
    .string()
    .describe(
      "Currency code for fixed commission (required if reward_type is amount)"
    )
    .optional(),
  minimum_payout_cents: z
    .number()
    .describe("Minimum cumulative commissions for payout")
    .nullish(),
  stripe_coupon_id: z
    .string()
    .describe(
      "Stripe coupon ID for double-sided incentives (Growth/Enterprise only)"
    )
    .nullish(),
});

export const schemas = {
  Pagination,
  Affiliate,
  ListAllAffiliatesResponse,
  CreateAffiliateRequest,
  UpdateAffiliateRequest,
  SSO,
  AffiliateBasic,
  MagicLinkResponse,
  AffiliateLink,
  ListAffiliateLinksResponse,
  CreateAffiliateLinkRequest,
  UpdateAffiliateLinkRequest,
  AffiliateCoupon,
  ListAffiliateCouponsResponse,
  CreateAffiliateCouponRequest,
  Link,
  Customer,
  Referral,
  ListReferralsResponse,
  Campaign,
  Sale,
  Commission,
  ListCommissionsResponse,
  UpdateCommissionRequest,
  DeleteCommissionResponse,
  CommissionItem,
  Payout,
  ListPayoutsResponse,
  ErrorResponse,
  ListCampaignsResponse,
  CreateCampaignRequest,
  UpdateCampaignRequest,
};

const endpoints = makeApi([
  {
    method: "get",
    path: "/affiliate_coupons",
    alias: "getAffiliate_coupons",
    description: `Retrieve a list of all affiliate coupons with pagination`,
    requestFormat: "json",
    response: ListAffiliateCouponsResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/affiliate_coupons",
    alias: "postAffiliate_coupons",
    description: `Create a new affiliate coupon`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: CreateAffiliateCouponRequest,
      },
    ],
    response: AffiliateCoupon,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliate_coupons/:id",
    alias: "getAffiliate_couponsId",
    description: `Retrieve a single affiliate coupon by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: AffiliateCoupon,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate coupon not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliate_links",
    alias: "getAffiliate_links",
    description: `Retrieve a list of all affiliate links with pagination`,
    requestFormat: "json",
    response: ListAffiliateLinksResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/affiliate_links",
    alias: "postAffiliate_links",
    description: `Create a new affiliate link`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: CreateAffiliateLinkRequest,
      },
    ],
    response: AffiliateLink,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliate_links/:id",
    alias: "getAffiliate_linksId",
    description: `Retrieve a single affiliate link by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: AffiliateLink,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate link not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/affiliate_links/:id",
    alias: "putAffiliate_linksId",
    description: `Update an existing affiliate link by its unique ID`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({
            token: z
              .string()
              .describe("The new unique token for the affiliate link."),
          })
          .partial(),
      },
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: AffiliateLink,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate link not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliates",
    alias: "getAffiliates",
    description: `Retrieve a list of all affiliates with pagination, optional expansion, and filtering by campaign or email.`,
    requestFormat: "json",
    parameters: [
      {
        name: "expand",
        type: "Query",
        schema: z.enum(["campaign", "links", "commission_stats"]).optional(),
      },
      {
        name: "campaign_id",
        type: "Query",
        schema: z.string().uuid().optional(),
      },
      {
        name: "email",
        type: "Query",
        schema: z.string().email().optional(),
      },
    ],
    response: ListAllAffiliatesResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/affiliates",
    alias: "postAffiliates",
    description: `Create a new affiliate in Rewardful`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: CreateAffiliateRequest,
      },
    ],
    response: Affiliate,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliates/:id",
    alias: "getAffiliatesId",
    description: `Retrieve a single affiliate by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Affiliate,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/affiliates/:id",
    alias: "putAffiliatesId",
    description: `Update an existing affiliate in Rewardful`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: UpdateAffiliateRequest,
      },
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Affiliate,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/affiliates/:id/sso",
    alias: "getAffiliatesIdsso",
    description: `Generate an SSO link for an affiliate, allowing them to access their account`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: MagicLinkResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Affiliate not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/campaigns",
    alias: "getCampaigns",
    description: `Retrieve a list of all campaigns with pagination.`,
    requestFormat: "json",
    response: ListCampaignsResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the authentication failure."),
        }),
      },
    ],
  },
  {
    method: "post",
    path: "/campaigns",
    alias: "postCampaigns",
    description: `Create a new campaign with specified attributes.`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: CreateCampaignRequest,
      },
    ],
    response: Campaign,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the issue with the input."),
        }),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the authentication failure."),
        }),
      },
      {
        status: 422,
        description: `Unprocessable Entity - Invalid input data.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the issue with the input."),
        }),
      },
    ],
  },
  {
    method: "put",
    path: "/campaigns/:id",
    alias: "putCampaignsId",
    description: `Update a specific campaign by its unique ID.`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: UpdateCampaignRequest,
      },
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Campaign,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the issue with the input."),
        }),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the authentication failure."),
        }),
      },
      {
        status: 404,
        description: `Campaign not found.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message indicating the campaign was not found."),
        }),
      },
    ],
  },
  {
    method: "get",
    path: "/campaigns/:id",
    alias: "getCampaignsId",
    description: `Retrieve a single campaign by its unique ID.`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Campaign,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: ErrorResponse.and(
          z
            .object({ error: z.string().describe("Description of the error.") })
            .partial()
        ),
      },
      {
        status: 404,
        description: `Campaign not found.`,
        schema: ErrorResponse.and(
          z
            .object({ error: z.string().describe("Description of the error.") })
            .partial()
        ),
      },
    ],
  },
  {
    method: "get",
    path: "/commissions",
    alias: "getCommissions",
    description: `Retrieve a list of commissions with optional filtering, expansion, and pagination.`,
    requestFormat: "json",
    parameters: [
      {
        name: "expand",
        type: "Query",
        schema: z.array(z.literal("sale")).optional(),
      },
      {
        name: "affiliate_id",
        type: "Query",
        schema: z.string().uuid().optional(),
      },
      {
        name: "state",
        type: "Query",
        schema: z
          .array(
            z
              .enum(["paid", "due", "pending"])
              .describe("The state of the commission.")
          )
          .optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().optional(),
      },
      {
        name: "limit",
        type: "Query",
        schema: z.number().optional(),
      },
    ],
    response: ListCommissionsResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/commissions/:id",
    alias: "getCommissionsId",
    description: `Retrieve a single commission by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Commission,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Commission not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/commissions/:id",
    alias: "putCommissionsId",
    description: `Update a commission&#x27;s paid or due date status.`,
    requestFormat: "form-url",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: UpdateCommissionRequest,
      },
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Commission,
    errors: [
      {
        status: 400,
        description: `Bad Request - Invalid input data.`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Commission not found.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/commissions/:id",
    alias: "deleteCommissionsId",
    description: `Delete a commission by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: DeleteCommissionResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Commission not found.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/payouts",
    alias: "getPayouts",
    description: `Retrieve a list of payouts with optional filtering, expansion, and pagination.`,
    requestFormat: "json",
    parameters: [
      {
        name: "expand",
        type: "Query",
        schema: z.array(z.enum(["affiliate", "commissions"])).optional(),
      },
      {
        name: "affiliate_id",
        type: "Query",
        schema: z.string().uuid().optional(),
      },
      {
        name: "state",
        type: "Query",
        schema: z
          .array(
            z
              .enum([
                "paid",
                "processing",
                "due",
                "pending",
                "completed",
                "failed",
              ])
              .describe("The state of the payout.")
          )
          .optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().optional(),
      },
      {
        name: "limit",
        type: "Query",
        schema: z.number().optional(),
      },
    ],
    response: ListPayoutsResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/payouts/:id",
    alias: "getPayoutsId",
    description: `Retrieve a single payout by its unique ID`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Payout,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.object({
          error: z.string().describe("Description of the error."),
        }),
      },
      {
        status: 404,
        description: `Payout not found`,
        schema: z.object({
          error: z.string().describe("Description of the error."),
        }),
      },
    ],
  },
  {
    method: "put",
    path: "/payouts/:id/pay",
    alias: "putPayoutsIdpay",
    description: `Mark a payout as paid. This queues the payout for processing.`,
    requestFormat: "json",
    parameters: [
      {
        name: "id",
        type: "Path",
        schema: z.string().uuid(),
      },
    ],
    response: Payout,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message describing the authentication failure."),
        }),
      },
      {
        status: 404,
        description: `Payout not found.`,
        schema: z.object({
          error: z
            .string()
            .describe("Error message indicating the payout was not found."),
        }),
      },
    ],
  },
  {
    method: "get",
    path: "/referrals",
    alias: "getReferrals",
    description: `Retrieve a list of referrals with optional filtering, expansion, and pagination.`,
    requestFormat: "json",
    parameters: [
      {
        name: "expand",
        type: "Query",
        schema: z.array(z.literal("affiliate")).optional(),
      },
      {
        name: "affiliate_id",
        type: "Query",
        schema: z.string().uuid().optional(),
      },
      {
        name: "conversion_state",
        type: "Query",
        schema: z
          .array(
            z
              .enum(["conversion", "lead", "visitor"])
              .describe(
                "The state of the referral conversion, either 'conversion', 'lead', or 'visitor'."
              )
          )
          .optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().optional(),
      },
      {
        name: "limit",
        type: "Query",
        schema: z.number().optional(),
      },
    ],
    response: ListReferralsResponse,
    errors: [
      {
        status: 401,
        description: `Unauthorized - Invalid API key or permissions`,
        schema: z.void(),
      },
    ],
  },
]);

export const RewardfulApiClient = new Zodios(
  "https://api.getrewardful.com/v1",
  endpoints
);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options);
}
